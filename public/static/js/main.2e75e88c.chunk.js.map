{
  "version": 3,
  "sources": [
    "components/Home.js",
    "components/user-pages/Signup.js",
    "components/user-pages/Login.js",
    "components/CountriesList.js",
    "components/Nav.js",
    "App.js",
    "serviceWorker.js",
    "index.js",
    "img/logo.svg",
    "components/MyUploader.js"
  ],
  "names": [
    "Home",
    "MyUploader",
    "React",
    "Component",
    "Signup",
    "props",
    "state",
    "fullName",
    "email",
    "password",
    "message",
    "event",
    "console",
    "log",
    "target",
    "value",
    "name",
    "this",
    "setState",
    "preventDefault",
    "axios",
    "post",
    "withCredentials",
    "then",
    "responseFromServer",
    "userDoc",
    "data",
    "onUserChange",
    "catch",
    "err",
    "currentUser",
    "className",
    "onSubmit",
    "handleSubmit",
    "onChange",
    "genericSync",
    "type",
    "placeholder",
    "Login",
    "process",
    "alert",
    "error",
    "response",
    "request",
    "config",
    "CountriesList",
    "theCountriesFromAPI",
    "fetch",
    "responseFromRESTCOUNTRIESApi",
    "json",
    "countries",
    "fetchCountries",
    "map",
    "oneCountry",
    "i",
    "key",
    "Nav",
    "get",
    "responseFromTheBackend",
    "syncCurrentUSer",
    "user",
    "role",
    "aria-label",
    "to",
    "src",
    "logo",
    "width",
    "height",
    "alt",
    "href",
    "aria-expanded",
    "data-target",
    "aria-hidden",
    "id",
    "exact",
    "path",
    "component",
    "render",
    "App",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "ReactDOM",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister",
    "module",
    "exports",
    "getUploadParams",
    "meta",
    "url",
    "handleChangeStatus",
    "status",
    "file",
    "files",
    "allFiles",
    "f",
    "forEach",
    "remove",
    "formData",
    "FormData",
    "append",
    "https",
    "require",
    "options",
    "req",
    "res",
    "chunks",
    "on",
    "chunk",
    "push",
    "body",
    "Buffer",
    "concat",
    "toString",
    "setHeader",
    "write",
    "end",
    "onChangeStatus",
    "accept"
  ],
  "mappings": "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",
  "file": "static/js/main.2e75e88c.chunk.js",
  "sourcesContent": [
    "import React from \"react\"\r\nimport MyUploader from './MyUploader'\r\n\r\n\r\nexport default class Home extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <MyUploader />\r\n            </section>\r\n        )\r\n    }\r\n}",
    "import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nexport default class Signup extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fullName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            message: null\r\n        }\r\n    }\r\n\r\n    genericSync(event) {\r\n        console.log(\"what is: \", event.target.value)\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        console.log(\"=====>\" + this.state.fullName, this.state.email, this.state.password, this.state.message);\r\n        console.log(\"submitting form\");\r\n        event.preventDefault();\r\n\r\n        axios.post(\r\n            // route we are hitting in the backend\r\n            \"http://localhost:3005/api/signup\",\r\n            // the data from the form (AKA req.body ðŸš€) that we are sending to this route to do the job\r\n            this.state,\r\n            // secure sending\r\n            { withCredentials: true }\r\n        )\r\n            .then(responseFromServer => {\r\n                console.log(\"response is:\", responseFromServer);\r\n                const { userDoc } = responseFromServer.data;\r\n                this.props.onUserChange(userDoc);\r\n            })\r\n            .catch(err => console.log(\"Err in signup: \", err));\r\n    }\r\n\r\n    render() {\r\n        console.log(\"Do I have user in Signup: \", this.props.currentUser)\r\n        const { fullName, email, password } = this.state;\r\n        console.log(\"STATE: \", this.state);\r\n        if (this.props.currentUser) {\r\n            return (\r\n                <div>\r\n                    <h2> Welcome to your app, {this.props.currentUser.fullName} ! You're signed in! </h2>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"columns is-centered\">\r\n                <div className=\"column is-5-tablet is-4-desktop is-3-widescreen\">\r\n                    <h1> Sign Up </h1>\r\n\r\n\r\n                    <form onSubmit={event => this.handleSubmit(event)} >\r\n                        {/*----- FULL NAME -----*/}\r\n                        <div className=\"field\">\r\n                            <p className=\"control has-icons-left has-icons-right\">\r\n                                <input\r\n                                    className=\"input\"\r\n                                    value={fullName} // this.state.email\r\n                                    onChange={event => this.genericSync(event)}\r\n                                    type='text'\r\n                                    name='fullName'\r\n                                    placeholder='Full Name'\r\n                                />\r\n                                <span className=\"icon is-small is-left\">\r\n                                    <i className=\"fa fa-envelope\"></i>\r\n                                </span>\r\n                                <span className=\"icon is-small is-right\">\r\n                                    <i className=\"fa fa-check\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n\r\n\r\n                        {/*----- EMAIL -----*/}\r\n                        <div className=\"field\">\r\n                            <p className=\"control has-icons-left has-icons-right\">\r\n                                <input\r\n                                    className=\"input\"\r\n                                    value={email} // this.state.email\r\n                                    onChange={event => this.genericSync(event)}\r\n                                    type='email'\r\n                                    name='email'\r\n                                    placeholder='myname@email.com'\r\n                                />\r\n                                <span className=\"icon is-small is-left\">\r\n                                    <i className=\"fa fa-envelope\"></i>\r\n                                </span>\r\n                                <span className=\"icon is-small is-right\">\r\n                                    <i className=\"fa fa-check\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n\r\n                        {/*----- PASSWORD -----*/}\r\n                        <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                                <input\r\n                                    className=\"input\"\r\n                                    value={password} // this.state.password\r\n                                    onChange={event => this.genericSync(event)}\r\n                                    type='password'\r\n                                    name='password'\r\n                                    placeholder='***********'\r\n                                />\r\n                                <span className=\"icon is-small is-left\">\r\n                                    <i className=\"fa fa-lock\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n\r\n                        {/*----- SUBMIT -----*/}\r\n                        <div className=\"field\">\r\n                            <p className=\"control\">\r\n                                <button className=\"button is-success\">\r\n                                    Sign Up\r\n                                </button>\r\n                            </p>\r\n                        </div>\r\n\r\n                    </form>\r\n                    {this.state.message && <div> {this.state.message} </div>}\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}",
    "import React from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class Login extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            fullName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            message: null\r\n        }\r\n    }\r\n\r\n    genericSync(event) {\r\n        // console.log(\"what is: \", event.target.value)\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        // console.log(\"submitting form\");\r\n        event.preventDefault();\r\n\r\n        axios.post(\r\n            // route we are hitting in the backend\r\n            `${process.env.REACT_APP_API_URL}/login`,\r\n            // the data from the form (AKA req.body ðŸš€) that we are sending to this route to do the job\r\n            this.state,\r\n            // secure sending\r\n            { withCredentials: true }\r\n        )\r\n            .then(responseFromServer => {\r\n                // console.log(\"response is:\", responseFromServer);\r\n                const { userDoc } = responseFromServer.data;\r\n                // this.props.onUserChange(userDoc);\r\n                alert(\"You are logged in.\")\r\n            })\r\n            .catch((error) => {\r\n                // Error\r\n                if (error.response) {\r\n                    // The request was made and the server responded with a status code\r\n                    // that falls out of the range of 2xx\r\n                    // console.log(error.response.data);\r\n                    // console.log(error.response.status);\r\n                    // console.log(error.response.headers);\r\n                } else if (error.request) {\r\n                    // The request was made but no response was received\r\n                    // `error.request` is an instance of XMLHttpRequest in the \r\n                    // browser and an instance of\r\n                    // http.ClientRequest in node.js\r\n                    console.log(error.request);\r\n                } else {\r\n                    // Something happened in setting up the request that triggered an Error\r\n                    console.log('Error', error.message);\r\n                }\r\n                console.log(error.config);\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { fullName, email, password } = this.state\r\n\r\n        return (\r\n            <div>\r\n\r\n\r\n\r\n                <div className=\"columns is-centered\">\r\n                    <div className=\"column is-5-tablet is-4-desktop is-3-widescreen\">\r\n                        <h1> Login </h1>\r\n\r\n\r\n                        <form onSubmit={event => this.handleSubmit(event)} >\r\n                            {/*----- EMAIL -----*/}\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left has-icons-right\">\r\n                                    <input\r\n                                        className=\"input\"\r\n                                        value={email} // this.state.email\r\n                                        onChange={event => this.genericSync(event)}\r\n                                        type='email'\r\n                                        name='email'\r\n                                        placeholder='myname@email.com'\r\n                                    />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fa fa-envelope\"></i>\r\n                                    </span>\r\n                                    <span className=\"icon is-small is-right\">\r\n                                        <i className=\"fa fa-check\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n\r\n                            {/*----- PASSWORD -----*/}\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left\">\r\n                                    <input\r\n                                        className=\"input\"\r\n                                        value={password} // this.state.password\r\n                                        onChange={event => this.genericSync(event)}\r\n                                        type='password'\r\n                                        name='password'\r\n                                        placeholder='***********'\r\n                                    />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fa fa-lock\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n\r\n                            {/*----- SUBMIT -----*/}\r\n                            <div className=\"field\">\r\n                                <p className=\"control\">\r\n                                    <button className=\"button is-success\">\r\n                                        Login\r\n                                </button>\r\n                                </p>\r\n                            </div>\r\n\r\n                        </form>\r\n                        {this.state.message && <div> {this.state.message} </div>}\r\n                    </div>\r\n                </div>\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n",
    "import React from \"react\";\n// import axios from \"axios\";\n\n\n\nexport default class CountriesList extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n           theCountriesFromAPI: []\n        }\n    }\n\n\n    // componentDidMount(){\n    //     axios.get(\"https://restcountries.eu/rest/v2/all\")\n    //     .then(responseFromRESTCOUNTRIESApi => {\n    //         // console.log(\"Response is: \", responseFromRESTCOUNTRIESApi.data)\n    //         this.setState({ theCountriesFromAPI: responseFromRESTCOUNTRIESApi.data })        \n    //     })\n    //     .catch(err =>console.log(\"Err while getting countries: \", err))\n    // }\n\n    // THE SAME AS ABOVE JUST USING FETCH\n    // componentDidMount(){\n    //     fetch(\"https://restcountries.eu/rest/v2/all\")\n    //     .then(responseFromRESTCOUNTRIESApi => {\n    //         // console.log(\"Response is: \", responseFromRESTCOUNTRIESApi.json())\n    //         return responseFromRESTCOUNTRIESApi.json()\n    //     })\n    //     .then(countries => this.setState({ theCountriesFromAPI: countries }))\n    //     .catch(err =>console.log(\"Err while getting countries: \", err))\n    // }\n\n\n    // the same as above just creating the regular method\n    fetchCountries(){\n        fetch(\"https://restcountries.eu/rest/v2/all\")\n        .then(responseFromRESTCOUNTRIESApi => {\n            // console.log(\"Response is: \", responseFromRESTCOUNTRIESApi.json())\n            return responseFromRESTCOUNTRIESApi.json()\n        })\n        .then(countries => this.setState({ theCountriesFromAPI: countries }))\n        .catch(err =>console.log(\"Err while getting countries: \", err))\n    }\n\n\n    render(){\n        const { theCountriesFromAPI } = this.state;\n        return (\n            <div>\n\n                {/* INVOKE METHOD HERE */}\n                { this.fetchCountries() } \n\n                <ul>\n                    { theCountriesFromAPI.map((oneCountry, i) => {\n                            return (\n                                <li key={i}> {oneCountry.name} </li>\n                            )\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}",
    "import React from 'react'\r\nimport logo from \"../img/logo.svg\"\r\nimport { Switch, Route, NavLink } from \"react-router-dom\"\r\n// import CountriesList from \"./components/CountriesList\"\r\nimport Home from '../components/Home'\r\nimport Signup from \"../components/user-pages/Signup\"\r\nimport Login from '../components/user-pages/Login'\r\nimport CountriesList from '../components/CountriesList'\r\nimport axios from 'axios'\r\n\r\n\r\nexport default class Nav extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentUser: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(\"http://localhost:3005/api/checkuser\", { withCredentials: true })\r\n      .then(responseFromTheBackend => {\r\n        // console.log(\"User in APP.JS: \", responseFromTheBackend)\r\n        const { userDoc } = responseFromTheBackend.data;\r\n        this.syncCurrentUSer(userDoc);\r\n      })\r\n      .catch(err => console.log(\"Err while getting the user from the checkuser route: \", err))\r\n  }\r\n\r\n  syncCurrentUSer(user) {\r\n    this.setState({ currentUser: user })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n        <nav className=\"navbar is-light\" role=\"navigation\" aria-label=\"main navigation\">\r\n          <div className=\"navbar-brand\">\r\n            <NavLink to=\"/\" className=\"navbar-item\" >\r\n              <img src={logo} width=\"152\" height=\"28\" alt=\"lazy reader logo\" />\r\n            </NavLink>\r\n\r\n            <a href=\"https://#\" role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n              <span aria-hidden=\"true\"></span>\r\n              <span aria-hidden=\"true\"></span>\r\n              <span aria-hidden=\"true\"></span>\r\n            </a>\r\n          </div>\r\n\r\n          <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n            <div className=\"navbar-start\">\r\n            </div>\r\n\r\n            <div className=\"navbar-end\">\r\n              <div className=\"navbar-item\">\r\n                <div className=\"buttons\">\r\n                  <NavLink to=\"/signup-page\" className=\"button is-primary\">\r\n                    <strong>Sign up</strong>\r\n                  </NavLink>\r\n                  <NavLink to=\"/login-page\" className=\"button is-light\">\r\n                    Log in\r\n                  </NavLink>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/signup-page\" render={() =>\r\n            <Signup\r\n              currentUser={this.state.currentUser}\r\n              onUserChange={userDoc => this.syncCurrentUSer(userDoc)}\r\n            />\r\n          } />\r\n          {/* Login component */}\r\n          <Route exact path=\"/login-page\" component={Login} />\r\n          <Route exact path=\"/bleh\" component={CountriesList} />\r\n        </Switch>\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}",
    "import React from 'react';\r\nimport './App.css';\r\n// import axios from \"axios\";\r\nimport Nav from \"./components/Nav\"\r\nimport 'react-bulma-components/dist/react-bulma-components.min.css'\r\n\r\n\r\n\r\nexport default class App extends React.Component {\r\n\r\n\r\n  // componentDidMount() {\r\n  //   axios.get(`${process.env.REACT_APP_SERVER}/api/checkuser`, { withCredentials: true })\r\n  //     .then(responseFromTheBackend => {\r\n  //       const { userDoc } = responseFromTheBackend.data;\r\n  //       this.syncCurrentUSer(userDoc);\r\n  //     })\r\n  //     .catch(err => console.log(\"Err while getting the user from the checkuser route: \", err))\r\n  // }\r\n\r\n  // syncCurrentUSer(user) {\r\n  //   this.setState({ currentUser: user })\r\n  // }\r\n\r\n\r\n  render() {\r\n    // console.log(\"the state in APPJS: \", this.state);\r\n    return (\r\n\r\n      <div >\r\n        <Nav />\r\n      </div>\r\n\r\n    )\r\n  }\r\n}",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
    "import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport './css/all.css'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n",
    "module.exports = __webpack_public_path__ + \"static/media/logo.4f77009c.svg\";",
    "\r\nimport React from 'react'\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nimport axios from 'axios'\r\n// import file from '../img/file.svg'\r\n// import ocrSpaceApi from 'ocr-space-api';\r\n// require('dotenv').config()\r\n\r\n\r\nexport default class MyUploader extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      file: null\r\n    }\r\n  }\r\n\r\n\r\n  // specify upload params and url for your files\r\n  getUploadParams = ({ meta }) => { return { url: 'https://httpbin.org/post' } }\r\n\r\n  // called every time a file's `status` changes\r\n  handleChangeStatus = ({ meta, file }, status) => {\r\n    this.setState({\r\n      file: file\r\n    })\r\n    console.log(status, meta, file);\r\n  }\r\n\r\n  // receives array of files that are done uploading when submit button is clicked\r\n  handleSubmit = (files, allFiles) => {\r\n    console.log(files.map(f => f.meta))\r\n    allFiles.forEach(f => f.remove())\r\n\r\n    // Start Cloudinary -----------------------\r\n    let formData = new FormData();\r\n    formData.append('theImage', this.state.file)\r\n\r\n    axios.post('http://localhost:3005/testing', formData)\r\n      .then(responseFromTheBackend => {\r\n        // responseFromTheBackend.data is the image url\r\n        console.log(responseFromTheBackend.data)\r\n\r\n        // let options = {\r\n        //   apikey: process.env.REACT_APP_OCR,\r\n        //   language: 'eng',\r\n        //   imageFormat: 'image/png', // Image Type (Only png ou gif is acceptable at the moment i wrote this)\r\n        //   isOverlayRequired: true\r\n        // };\r\n\r\n        // Image file to upload\r\n        // let imageFilePath = responseFromTheBackend.data;\r\n\r\n        // Run and wait the result\r\n        // ocrSpaceApi.parseImageFromLocalFile(imageFilePath, options)\r\n        //   .then((parsedResults) => {\r\n        //     console.log(parsedResults)\r\n        //     console.log('parsedText: \\n', parsedResults.parsedText);\r\n        //     console.log('ocrParsedResults: \\n', parsedResults.ocrParsedResult);\r\n        //   }).catch((err) => {\r\n        //     console.log('ERROR:', err);\r\n        //   });\r\n\r\n        // Example API Request -----------------------------\r\n        var https = require('https');\r\n\r\n        var options = {\r\n          'method': 'GET',\r\n          'hostname': 'api.ocr.space',\r\n          'path': `/parse/imageurl?apikey=86be69917788957&url=${responseFromTheBackend.data}&language=chs&isOverlayRequired=true`,\r\n          'headers': {\r\n            'apikey': '86be69917788957'\r\n          }\r\n        };\r\n\r\n        var req = https.request(options, function (res) {\r\n          var chunks = [];\r\n\r\n          res.on(\"data\", function (chunk) {\r\n            chunks.push(chunk);\r\n          });\r\n\r\n          res.on(\"end\", function (chunk) {\r\n            var body = Buffer.concat(chunks);\r\n            console.log(body.toString());\r\n          });\r\n\r\n          res.on(\"error\", function (error) {\r\n            console.error(error);\r\n          });\r\n        });\r\n\r\n        var postData = \"------WebKitFormBoundary7MA4YWxkTrZu0gW\\r\\nContent-Disposition: form-data; name=\\\"language\\\"\\r\\n\\r\\neng\\r\\n------WebKitFormBoundary7MA4YWxkTrZu0gW\\r\\nContent-Disposition: form-data; name=\\\"isOverlayRequired\\\"\\r\\n\\r\\nfalse\\r\\n------WebKitFormBoundary7MA4YWxkTrZu0gW\\r\\nContent-Disposition: form-data; name=\\\"url\\\"\\r\\n\\r\\nhttp://dl.a9t9.com/ocrbenchmark/eng.png\\r\\n------WebKitFormBoundary7MA4YWxkTrZu0gW\\r\\nContent-Disposition: form-data; name=\\\"iscreatesearchablepdf\\\"\\r\\n\\r\\nfalse\\r\\n------WebKitFormBoundary7MA4YWxkTrZu0gW\\r\\nContent-Disposition: form-data; name=\\\"issearchablepdfhidetextlayer\\\"\\r\\n\\r\\nfalse\\r\\n------WebKitFormBoundary7MA4YWxkTrZu0gW--\";\r\n\r\n        req.setHeader('content-type', 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW');\r\n\r\n        req.write(postData);\r\n\r\n        req.end();\r\n        // -----------------------------  \r\n\r\n      })\r\n\r\n      .catch(err => console.log(\"error from inside Form Data\", err))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container has-text-centered\t\">\r\n        <h1 className=\"has-text-grey-dark\thas-text-weight-semibold is-size-4\">The best app to convert academic journals to audio.</h1>\r\n        {/* <img src={file} alt=\"file icon\" /> */}\r\n        <Dropzone\r\n          getUploadParams={this.getUploadParams}\r\n          onChangeStatus={this.handleChangeStatus}\r\n          onSubmit={this.handleSubmit}\r\n          accept=\".png, .jpg, .jpeg, .pdf\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n{/* <Image publicId=\"file-converter-project-3/filename.filetype\" >\r\n</Image> */}"
  ],
  "sourceRoot": ""
}